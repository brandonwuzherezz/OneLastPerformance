//the following code was generated by generateQ.js
//skip to line 1018 to read the actual tile code.

const Q_1_2 = 
[[1/2, 1, 2],
[1/1, 1, 1],
[2/1, 2, 1]];

const Q_1_3 = 
[[1/3, 1, 3],
[1/2, 1, 2],
[2/3, 2, 3],
[1/1, 1, 1],
[3/2, 3, 2],
[2/1, 2, 1],
[3/1, 3, 1]];

const Q_2_3 = 
[[2/3, 2, 3],
[2/2, 2, 2],
[3/2, 3, 2]];

const Q_1_4 = 
[[1/4, 1, 4],
[1/3, 1, 3],
[1/2, 1, 2],
[2/3, 2, 3],
[3/4, 3, 4],
[1/1, 1, 1],
[4/3, 4, 3],
[3/2, 3, 2],
[2/1, 2, 1],
[3/1, 3, 1],
[4/1, 4, 1]];

const Q_2_4 = 
[[2/4, 2, 4],
[2/3, 2, 3],
[3/4, 3, 4],
[2/2, 2, 2],
[4/3, 4, 3],
[3/2, 3, 2],
[4/2, 4, 2]];

const Q_3_4 = 
[[3/4, 3, 4],
[3/3, 3, 3],
[4/3, 4, 3]];

const Q_1_5 = 
[[1/5, 1, 5],
[1/4, 1, 4],
[1/3, 1, 3],
[2/5, 2, 5],
[1/2, 1, 2],
[3/5, 3, 5],
[2/3, 2, 3],
[3/4, 3, 4],
[4/5, 4, 5],
[1/1, 1, 1],
[5/4, 5, 4],
[4/3, 4, 3],
[3/2, 3, 2],
[5/3, 5, 3],
[2/1, 2, 1],
[5/2, 5, 2],
[3/1, 3, 1],
[4/1, 4, 1],
[5/1, 5, 1]];

const Q_2_5 = 
[[2/5, 2, 5],
[2/4, 2, 4],
[3/5, 3, 5],
[2/3, 2, 3],
[3/4, 3, 4],
[4/5, 4, 5],
[2/2, 2, 2],
[5/4, 5, 4],
[4/3, 4, 3],
[3/2, 3, 2],
[5/3, 5, 3],
[4/2, 4, 2],
[5/2, 5, 2]];

const Q_3_5 = 
[[3/5, 3, 5],
[3/4, 3, 4],
[4/5, 4, 5],
[3/3, 3, 3],
[5/4, 5, 4],
[4/3, 4, 3],
[5/3, 5, 3]];

const Q_4_5 = 
[[4/5, 4, 5],
[4/4, 4, 4],
[5/4, 5, 4]];

const Q_1_6 = 
[[1/6, 1, 6],
[1/5, 1, 5],
[1/4, 1, 4],
[1/3, 1, 3],
[2/5, 2, 5],
[1/2, 1, 2],
[3/5, 3, 5],
[2/3, 2, 3],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[1/1, 1, 1],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[3/2, 3, 2],
[5/3, 5, 3],
[2/1, 2, 1],
[5/2, 5, 2],
[3/1, 3, 1],
[4/1, 4, 1],
[5/1, 5, 1],
[6/1, 6, 1]];

const Q_2_6 = 
[[2/6, 2, 6],
[2/5, 2, 5],
[2/4, 2, 4],
[3/5, 3, 5],
[2/3, 2, 3],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[2/2, 2, 2],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[3/2, 3, 2],
[5/3, 5, 3],
[4/2, 4, 2],
[5/2, 5, 2],
[6/2, 6, 2]];

const Q_3_6 = 
[[3/6, 3, 6],
[3/5, 3, 5],
[4/6, 4, 6],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[3/3, 3, 3],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[6/4, 6, 4],
[5/3, 5, 3],
[6/3, 6, 3]];

const Q_4_6 = 
[[4/6, 4, 6],
[4/5, 4, 5],
[5/6, 5, 6],
[4/4, 4, 4],
[6/5, 6, 5],
[5/4, 5, 4],
[6/4, 6, 4]];

const Q_5_6 = 
[[5/6, 5, 6],
[5/5, 5, 5],
[6/5, 6, 5]];

const Q_1_7 = 
[[1/7, 1, 7],
[1/6, 1, 6],
[1/5, 1, 5],
[1/4, 1, 4],
[2/7, 2, 7],
[1/3, 1, 3],
[2/5, 2, 5],
[3/7, 3, 7],
[1/2, 1, 2],
[4/7, 4, 7],
[3/5, 3, 5],
[2/3, 2, 3],
[5/7, 5, 7],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[1/1, 1, 1],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[7/5, 7, 5],
[3/2, 3, 2],
[5/3, 5, 3],
[7/4, 7, 4],
[2/1, 2, 1],
[7/3, 7, 3],
[5/2, 5, 2],
[3/1, 3, 1],
[7/2, 7, 2],
[4/1, 4, 1],
[5/1, 5, 1],
[6/1, 6, 1],
[7/1, 7, 1]];

const Q_2_7 = 
[[2/7, 2, 7],
[2/6, 2, 6],
[2/5, 2, 5],
[3/7, 3, 7],
[2/4, 2, 4],
[4/7, 4, 7],
[3/5, 3, 5],
[2/3, 2, 3],
[5/7, 5, 7],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[2/2, 2, 2],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[7/5, 7, 5],
[3/2, 3, 2],
[5/3, 5, 3],
[7/4, 7, 4],
[4/2, 4, 2],
[7/3, 7, 3],
[5/2, 5, 2],
[6/2, 6, 2],
[7/2, 7, 2]];

const Q_3_7 = 
[[3/7, 3, 7],
[3/6, 3, 6],
[4/7, 4, 7],
[3/5, 3, 5],
[4/6, 4, 6],
[5/7, 5, 7],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[3/3, 3, 3],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[7/5, 7, 5],
[6/4, 6, 4],
[5/3, 5, 3],
[7/4, 7, 4],
[6/3, 6, 3],
[7/3, 7, 3]];

const Q_4_7 = 
[[4/7, 4, 7],
[4/6, 4, 6],
[5/7, 5, 7],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[4/4, 4, 4],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[7/5, 7, 5],
[6/4, 6, 4],
[7/4, 7, 4]];

const Q_5_7 = 
[[5/7, 5, 7],
[5/6, 5, 6],
[6/7, 6, 7],
[5/5, 5, 5],
[7/6, 7, 6],
[6/5, 6, 5],
[7/5, 7, 5]];

const Q_6_7 = 
[[6/7, 6, 7],
[6/6, 6, 6],
[7/6, 7, 6]];

const Q_1_8 = 
[[1/8, 1, 8],
[1/7, 1, 7],
[1/6, 1, 6],
[1/5, 1, 5],
[1/4, 1, 4],
[2/7, 2, 7],
[1/3, 1, 3],
[3/8, 3, 8],
[2/5, 2, 5],
[3/7, 3, 7],
[1/2, 1, 2],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[2/3, 2, 3],
[5/7, 5, 7],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[1/1, 1, 1],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[7/5, 7, 5],
[3/2, 3, 2],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[2/1, 2, 1],
[7/3, 7, 3],
[5/2, 5, 2],
[8/3, 8, 3],
[3/1, 3, 1],
[7/2, 7, 2],
[4/1, 4, 1],
[5/1, 5, 1],
[6/1, 6, 1],
[7/1, 7, 1],
[8/1, 8, 1]];

const Q_2_8 = 
[[2/8, 2, 8],
[2/7, 2, 7],
[2/6, 2, 6],
[3/8, 3, 8],
[2/5, 2, 5],
[3/7, 3, 7],
[2/4, 2, 4],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[2/3, 2, 3],
[5/7, 5, 7],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[2/2, 2, 2],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[7/5, 7, 5],
[3/2, 3, 2],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[4/2, 4, 2],
[7/3, 7, 3],
[5/2, 5, 2],
[8/3, 8, 3],
[6/2, 6, 2],
[7/2, 7, 2],
[8/2, 8, 2]];

const Q_3_8 = 
[[3/8, 3, 8],
[3/7, 3, 7],
[3/6, 3, 6],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[4/6, 4, 6],
[5/7, 5, 7],
[3/4, 3, 4],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[3/3, 3, 3],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[4/3, 4, 3],
[7/5, 7, 5],
[6/4, 6, 4],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[6/3, 6, 3],
[7/3, 7, 3],
[8/3, 8, 3]];

const Q_4_8 = 
[[4/8, 4, 8],
[4/7, 4, 7],
[5/8, 5, 8],
[4/6, 4, 6],
[5/7, 5, 7],
[6/8, 6, 8],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[4/4, 4, 4],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[8/6, 8, 6],
[7/5, 7, 5],
[6/4, 6, 4],
[8/5, 8, 5],
[7/4, 7, 4],
[8/4, 8, 4]];

const Q_5_8 = 
[[5/8, 5, 8],
[5/7, 5, 7],
[6/8, 6, 8],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[5/5, 5, 5],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[8/6, 8, 6],
[7/5, 7, 5],
[8/5, 8, 5]];

const Q_6_8 = 
[[6/8, 6, 8],
[6/7, 6, 7],
[7/8, 7, 8],
[6/6, 6, 6],
[8/7, 8, 7],
[7/6, 7, 6],
[8/6, 8, 6]];

const Q_7_8 = 
[[7/8, 7, 8],
[7/7, 7, 7],
[8/7, 8, 7]];

const Q_1_9 = 
[[1/9, 1, 9],
[1/8, 1, 8],
[1/7, 1, 7],
[1/6, 1, 6],
[1/5, 1, 5],
[2/9, 2, 9],
[1/4, 1, 4],
[2/7, 2, 7],
[1/3, 1, 3],
[3/8, 3, 8],
[2/5, 2, 5],
[3/7, 3, 7],
[4/9, 4, 9],
[1/2, 1, 2],
[5/9, 5, 9],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[2/3, 2, 3],
[5/7, 5, 7],
[3/4, 3, 4],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[1/1, 1, 1],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[4/3, 4, 3],
[7/5, 7, 5],
[3/2, 3, 2],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[9/5, 9, 5],
[2/1, 2, 1],
[9/4, 9, 4],
[7/3, 7, 3],
[5/2, 5, 2],
[8/3, 8, 3],
[3/1, 3, 1],
[7/2, 7, 2],
[4/1, 4, 1],
[9/2, 9, 2],
[5/1, 5, 1],
[6/1, 6, 1],
[7/1, 7, 1],
[8/1, 8, 1],
[9/1, 9, 1]];

const Q_2_9 = 
[[2/9, 2, 9],
[2/8, 2, 8],
[2/7, 2, 7],
[2/6, 2, 6],
[3/8, 3, 8],
[2/5, 2, 5],
[3/7, 3, 7],
[4/9, 4, 9],
[2/4, 2, 4],
[5/9, 5, 9],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[2/3, 2, 3],
[5/7, 5, 7],
[3/4, 3, 4],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[2/2, 2, 2],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[4/3, 4, 3],
[7/5, 7, 5],
[3/2, 3, 2],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[9/5, 9, 5],
[4/2, 4, 2],
[9/4, 9, 4],
[7/3, 7, 3],
[5/2, 5, 2],
[8/3, 8, 3],
[6/2, 6, 2],
[7/2, 7, 2],
[8/2, 8, 2],
[9/2, 9, 2]];

const Q_3_9 = 
[[3/9, 3, 9],
[3/8, 3, 8],
[3/7, 3, 7],
[4/9, 4, 9],
[3/6, 3, 6],
[5/9, 5, 9],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[4/6, 4, 6],
[5/7, 5, 7],
[3/4, 3, 4],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[3/3, 3, 3],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[4/3, 4, 3],
[7/5, 7, 5],
[6/4, 6, 4],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[9/5, 9, 5],
[6/3, 6, 3],
[9/4, 9, 4],
[7/3, 7, 3],
[8/3, 8, 3],
[9/3, 9, 3]];

const Q_4_9 = 
[[4/9, 4, 9],
[4/8, 4, 8],
[5/9, 5, 9],
[4/7, 4, 7],
[5/8, 5, 8],
[4/6, 4, 6],
[5/7, 5, 7],
[6/8, 6, 8],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[4/4, 4, 4],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[8/6, 8, 6],
[7/5, 7, 5],
[6/4, 6, 4],
[8/5, 8, 5],
[7/4, 7, 4],
[9/5, 9, 5],
[8/4, 8, 4],
[9/4, 9, 4]];

const Q_5_9 = 
[[5/9, 5, 9],
[5/8, 5, 8],
[6/9, 6, 9],
[5/7, 5, 7],
[6/8, 6, 8],
[7/9, 7, 9],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[5/5, 5, 5],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[9/7, 9, 7],
[8/6, 8, 6],
[7/5, 7, 5],
[9/6, 9, 6],
[8/5, 8, 5],
[9/5, 9, 5]];

const Q_6_9 = 
[[6/9, 6, 9],
[6/8, 6, 8],
[7/9, 7, 9],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[6/6, 6, 6],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[9/7, 9, 7],
[8/6, 8, 6],
[9/6, 9, 6]];

const Q_7_9 = 
[[7/9, 7, 9],
[7/8, 7, 8],
[8/9, 8, 9],
[7/7, 7, 7],
[9/8, 9, 8],
[8/7, 8, 7],
[9/7, 9, 7]];

const Q_8_9 = 
[[8/9, 8, 9],
[8/8, 8, 8],
[9/8, 9, 8]];

const Q_1_10 = 
[[1/10, 1, 10],
[1/9, 1, 9],
[1/8, 1, 8],
[1/7, 1, 7],
[1/6, 1, 6],
[1/5, 1, 5],
[2/9, 2, 9],
[1/4, 1, 4],
[2/7, 2, 7],
[3/10, 3, 10],
[1/3, 1, 3],
[3/8, 3, 8],
[2/5, 2, 5],
[3/7, 3, 7],
[4/9, 4, 9],
[1/2, 1, 2],
[5/9, 5, 9],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[2/3, 2, 3],
[7/10, 7, 10],
[5/7, 5, 7],
[3/4, 3, 4],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[1/1, 1, 1],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[4/3, 4, 3],
[7/5, 7, 5],
[10/7, 10, 7],
[3/2, 3, 2],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[9/5, 9, 5],
[2/1, 2, 1],
[9/4, 9, 4],
[7/3, 7, 3],
[5/2, 5, 2],
[8/3, 8, 3],
[3/1, 3, 1],
[10/3, 10, 3],
[7/2, 7, 2],
[4/1, 4, 1],
[9/2, 9, 2],
[5/1, 5, 1],
[6/1, 6, 1],
[7/1, 7, 1],
[8/1, 8, 1],
[9/1, 9, 1],
[10/1, 10, 1]];

const Q_2_10 = 
[[2/10, 2, 10],
[2/9, 2, 9],
[2/8, 2, 8],
[2/7, 2, 7],
[3/10, 3, 10],
[2/6, 2, 6],
[3/8, 3, 8],
[2/5, 2, 5],
[3/7, 3, 7],
[4/9, 4, 9],
[2/4, 2, 4],
[5/9, 5, 9],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[2/3, 2, 3],
[7/10, 7, 10],
[5/7, 5, 7],
[3/4, 3, 4],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[2/2, 2, 2],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[4/3, 4, 3],
[7/5, 7, 5],
[10/7, 10, 7],
[3/2, 3, 2],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[9/5, 9, 5],
[4/2, 4, 2],
[9/4, 9, 4],
[7/3, 7, 3],
[5/2, 5, 2],
[8/3, 8, 3],
[6/2, 6, 2],
[10/3, 10, 3],
[7/2, 7, 2],
[8/2, 8, 2],
[9/2, 9, 2],
[10/2, 10, 2]];

const Q_3_10 = 
[[3/10, 3, 10],
[3/9, 3, 9],
[3/8, 3, 8],
[4/10, 4, 10],
[3/7, 3, 7],
[4/9, 4, 9],
[3/6, 3, 6],
[5/9, 5, 9],
[4/7, 4, 7],
[3/5, 3, 5],
[5/8, 5, 8],
[4/6, 4, 6],
[7/10, 7, 10],
[5/7, 5, 7],
[3/4, 3, 4],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[3/3, 3, 3],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[4/3, 4, 3],
[7/5, 7, 5],
[10/7, 10, 7],
[6/4, 6, 4],
[8/5, 8, 5],
[5/3, 5, 3],
[7/4, 7, 4],
[9/5, 9, 5],
[6/3, 6, 3],
[9/4, 9, 4],
[7/3, 7, 3],
[10/4, 10, 4],
[8/3, 8, 3],
[9/3, 9, 3],
[10/3, 10, 3]];

const Q_4_10 = 
[[4/10, 4, 10],
[4/9, 4, 9],
[4/8, 4, 8],
[5/9, 5, 9],
[4/7, 4, 7],
[6/10, 6, 10],
[5/8, 5, 8],
[4/6, 4, 6],
[7/10, 7, 10],
[5/7, 5, 7],
[6/8, 6, 8],
[7/9, 7, 9],
[4/5, 4, 5],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[4/4, 4, 4],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[5/4, 5, 4],
[9/7, 9, 7],
[8/6, 8, 6],
[7/5, 7, 5],
[10/7, 10, 7],
[6/4, 6, 4],
[8/5, 8, 5],
[10/6, 10, 6],
[7/4, 7, 4],
[9/5, 9, 5],
[8/4, 8, 4],
[9/4, 9, 4],
[10/4, 10, 4]];

const Q_5_10 = 
[[5/10, 5, 10],
[5/9, 5, 9],
[6/10, 6, 10],
[5/8, 5, 8],
[6/9, 6, 9],
[7/10, 7, 10],
[5/7, 5, 7],
[6/8, 6, 8],
[7/9, 7, 9],
[8/10, 8, 10],
[5/6, 5, 6],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[5/5, 5, 5],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[6/5, 6, 5],
[10/8, 10, 8],
[9/7, 9, 7],
[8/6, 8, 6],
[7/5, 7, 5],
[10/7, 10, 7],
[9/6, 9, 6],
[8/5, 8, 5],
[10/6, 10, 6],
[9/5, 9, 5],
[10/5, 10, 5]];

const Q_6_10 = 
[[6/10, 6, 10],
[6/9, 6, 9],
[7/10, 7, 10],
[6/8, 6, 8],
[7/9, 7, 9],
[8/10, 8, 10],
[6/7, 6, 7],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[6/6, 6, 6],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[7/6, 7, 6],
[10/8, 10, 8],
[9/7, 9, 7],
[8/6, 8, 6],
[10/7, 10, 7],
[9/6, 9, 6],
[10/6, 10, 6]];

const Q_7_10 = 
[[7/10, 7, 10],
[7/9, 7, 9],
[8/10, 8, 10],
[7/8, 7, 8],
[8/9, 8, 9],
[9/10, 9, 10],
[7/7, 7, 7],
[10/9, 10, 9],
[9/8, 9, 8],
[8/7, 8, 7],
[10/8, 10, 8],
[9/7, 9, 7],
[10/7, 10, 7]];

const Q_8_10 = 
[[8/10, 8, 10],
[8/9, 8, 9],
[9/10, 9, 10],
[8/8, 8, 8],
[10/9, 10, 9],
[9/8, 9, 8],
[10/8, 10, 8]];

const Q_9_10 = 
[[9/10, 9, 10],
[9/9, 9, 9],
[10/9, 10, 9]];

var Q = new Map();
Q.set ('1_2', Q_1_2);
Q.set ('1_3', Q_1_3);
Q.set ('2_3', Q_2_3);
Q.set ('1_4', Q_1_4);
Q.set ('2_4', Q_2_4);
Q.set ('3_4', Q_3_4);
Q.set ('1_5', Q_1_5);
Q.set ('2_5', Q_2_5);
Q.set ('3_5', Q_3_5);
Q.set ('4_5', Q_4_5);
Q.set ('1_6', Q_1_6);
Q.set ('2_6', Q_2_6);
Q.set ('3_6', Q_3_6);
Q.set ('4_6', Q_4_6);
Q.set ('5_6', Q_5_6);
Q.set ('1_7', Q_1_7);
Q.set ('2_7', Q_2_7);
Q.set ('3_7', Q_3_7);
Q.set ('4_7', Q_4_7);
Q.set ('5_7', Q_5_7);
Q.set ('6_7', Q_6_7);
Q.set ('1_8', Q_1_8);
Q.set ('2_8', Q_2_8);
Q.set ('3_8', Q_3_8);
Q.set ('4_8', Q_4_8);
Q.set ('5_8', Q_5_8);
Q.set ('6_8', Q_6_8);
Q.set ('7_8', Q_7_8);
Q.set ('1_9', Q_1_9);
Q.set ('2_9', Q_2_9);
Q.set ('3_9', Q_3_9);
Q.set ('4_9', Q_4_9);
Q.set ('5_9', Q_5_9);
Q.set ('6_9', Q_6_9);
Q.set ('7_9', Q_7_9);
Q.set ('8_9', Q_8_9);
Q.set ('1_10', Q_1_10);
Q.set ('2_10', Q_2_10);
Q.set ('3_10', Q_3_10);
Q.set ('4_10', Q_4_10);
Q.set ('5_10', Q_5_10);
Q.set ('6_10', Q_6_10);
Q.set ('7_10', Q_7_10);
Q.set ('8_10', Q_8_10);
Q.set ('9_10', Q_9_10);

//here begins the actual tile code.

function Tile (src, objWidth, objHeight) {
	this.image = new Image();
	this.image.src = src;
	this.objWidth = objWidth;
	this.objHeight = objHeight;

	this.ratioX;
	this.ratioY;
	
	
	function init(c) {
		//get the nearest ratio of objWidth and objHeight
		//that can be represented as (m,n)-reduced fraction p/q
		//and by (m,n)-reduced I mean as reduced as possible
		//such that p and q are in [m, ..., n]

		//NOTE:
		//Idealy, one would have Q_M_N for many M and N
		//where the m used would depend linearly on max(objWidth, objHeight),
		//and the n used would depend linearly on min(objWidth, objHeight).
		//this would ensure that the size of individual tile pieces stayed roughly uniform.

		//the texture may tile at most n times
		//so n should be determined by the thicker dimension
		//var q_N = Math.min(Math.ceil(Math.max(c.objWidth, c.objHeight)/50), 10);
		//WARNING: must address case where object is very small (m = n = 1)
		//if (q_N == 1) q_N++;
		//the texture must tile at least m times
		//so m should be determined by the thinner dimension
		//var q_M = Math.min(Math.ceil(Math.min(c.objWidth, c.objHeight)/50), q_N-1);
		//var q = Q.get("" + q_M + "_" + q_N);
		var q = Q.get("1_10");
		
		var naiveRatio = c.objWidth / c.objHeight;
		for (var i = 0; i < q.length; ++i) {
			if (naiveRatio > q[i][0]) {
				var j = 0;
				if (i + 1 != q.length && q[i+1][0] - naiveRatio < naiveRatio - q[i][0]) {
					j = 1;
				}
				c.ratioX = q[i+j][1];
				c.ratioY = q[i+j][2];
			}
		}
		c.tileWidth = Math.floor(c.objWidth / c.ratioX); //ASSUMPTION: image is approximately sqare
		c.tileHeight = Math.floor(c.objHeight / c.ratioY);
		//console.log(c.tileWidth);
		//console.log(c.tileHeight);
	}
	
	//ASSUMPTION: image is in special texture format (see cloudTex for example)
	this.draw = function(c, gamestate) {
		var clipX;
		var clipY;
		var scale;
		var dx = 0;
		var dy = 0;
		for (var rx = 0; rx < this.ratioX; ++rx) {
			for (var ry = 0; ry < this.ratioY; ++ry) {
				//I'm sure this could be written without so many if-else statements.
				//But there are other things I need to work on right now.
				scale = 1;
				if (this.ratioX == 1) {
					if (this.ratioY == 1) {
						//draw a square
						clipX = 0;
						clipY = 0;
						scale = 3;
					}
					else {
						if (ry == 0) {
							//thin top
							clipX = 3;
							clipY = 0;
						}
						else if (ry == this.ratioY - 1) {
							//thin bottom
							clipX = 3;
							clipY = 2;
						}
						else {
							//thin middle
							clipX = 3;
							clipY = 1;
						}
					}
				}
				else if (this.ratioY == 1) {
					if (rx == 0) {
						//thin left
						clipX = 0;
						clipY = 3;
					}
					else if (rx == this.ratioX - 1) {
						//thin right
						clipX = 2;
						clipY = 3;
					}
					else {
						//thin middle
						clipX = 1;
						clipY = 3;
					}
				}
				else if (rx == 0) {
					if (ry == 0) {
						//top-left
						clipX = 0;
						clipY = 0;
					}
					else if (ry == this.ratioY - 1) {
						//bottom-left
						clipX = 0;
						clipY = 2;
					}
					else {
						//middle-left
						clipX = 0;
						clipY = 1;
					}
				}
				else if (rx == this.ratioX - 1) {
					if (ry == 0) {
						//top-right
						clipX = 2;
						clipY = 0;
					}
					else if (ry == this.ratioY - 1) {
						//bottom-right
						clipX = 2;
						clipY = 2;
					}
					else {
						//middle-right
						clipX = 2;
						clipY = 1;
					}
				}
				else if (ry == 0) {
					//middle-top
					clipX = 1;
					clipY = 0;
				}
				else if (ry == this.ratioY - 1) {
					//middle-bottom
					clipX = 1;
					clipY = 2;
				}
				else {
					//center
					clipX = 1;
					clipY = 1;
				}
				gamestate.context.drawImage(this.image,
											this.image.width/4 * clipX, this.image.height/4 * clipY,
											this.image.width/4 * scale, this.image.height/4 * scale,
											c.position.x + dx, c.position.y + dy,
											Math.floor(this.objWidth / this.ratioX), Math.floor(this.objHeight / this.ratioY));
				dy += Math.floor(this.objHeight / this.ratioY);
			}
			dx += Math.floor(this.objWidth / this.ratioX);
			dy = 0;
		}
	}
	
	init(this);
}